#덧셈
solution = lambda x,y : x+y

"""
아니... 

solution=lambda *x:sum(x)

이거 뭔데... 람다는 익명함수에다가 *x 로 들어오는건 튜플로 패킹... 
세상에. 세상에 고수는 너무 많다. 
파이썬에 적응할려면 한참 걸리겠다. 너무 지원하는게 많아!
"""
#----------------------------------------------------------------------------------------------------------
#뺼셈
solution = lambda x,y : x-y

"""

def solution(num1, num2):
    def validate_input(x, lower, upper):
        if x >= lower and x <= upper:
            return True
        return False
    num_list = [num1, num2]
    assert all([validate_input(x, -50000, 50000) for x in num_list])
    answer = num1 - num2
    return answer

댓글에 한 수 배워간다고 하길래 길수록 나쁘지 않나 싶어서 확인해봤는데
assert 는 함수 성능을 높이기 위한 가정 설정문이라고 한다. if 보다 효율이 좋으니까 쓰였겠지?

찾아보니까 assert 는 조건에 맞지 않으면 내가 원하는 에러를 발생시킬 수 있었다.
쓸모있는 친구네.. 당연히 입력이 주어진 조건 외에서 안벗어날거라 생각했는데, 안일하게 생각하지 말아야겠다. 

"""
#----------------------------------------------------------------------------------------------------------------
#몫 구하기 

#첫번째 답 (가장 간소화해봄)
solution = lambda x,y : int(x/y)

#두번째 답(조건 확인)
def solution(num1, num2):
    assert num1>0 and num1<=100 and num2>0 and num2<=100, "범위를 벗어남"
    return int(num1/num2)

"""
참고사항
1) 파이썬은... 몫 연산자 .... " // " 이 친구가 있다.. 적응하자..
2) 이거뭐임??

solution = int.__floordiv__

매직 메소드라는게 나오네요..? 하하핳.. 이거는 뭐 덮어 씌울 필요도 없이 이미 내부에 구현된 거니.. 우와.. 
이미 구현된걸 왜 구현하고 있었나 라는 자괴감이 들지만 아무튼 배워갑니다..... class 있으면 꼭 써먹어야지.
"""
